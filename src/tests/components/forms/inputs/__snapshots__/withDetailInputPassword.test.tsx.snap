// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<withDetailInputPassword /> should match to snapshot and input password must have footerinputpassword props 1`] = `
<Formik
  initialValues={
    Object {
      "password": "",
    }
  }
  onSubmit={[Function]}
>
  <Component
    className="w-full"
    label="Contraseña"
    name="password"
  >
    <InputTextApp
      className="w-full"
      footer={[Function]}
      icon=""
      id=""
      keyfilter={/\\[\\^\\\\s\\]/}
      label="Contraseña"
      mediumLabel="Moderada"
      name="password"
      placeholder=""
      promptLabel="Ingresa una contraseña"
      strongLabel="Difícil"
      toggleMask={true}
      type="password"
      weakLabel="Débil"
    >
      <span
        className="p-float-label p-input-icon-right w-full"
      >
        <i
          className=""
        />
        <Password
          appendTo={null}
          autoComplete="off"
          className="w-full"
          content={null}
          feedback={true}
          footer={[Function]}
          header={null}
          icon=""
          id=""
          inputClassName={null}
          inputId={null}
          inputRef={null}
          inputStyle={null}
          keyfilter={/\\[\\^\\\\s\\]/}
          mediumLabel="Moderada"
          mediumRegex="^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})"
          name="password"
          onBlur={[Function]}
          onChange={[Function]}
          onHide={null}
          onInput={null}
          onShow={null}
          panelClassName={null}
          panelStyle={null}
          placeholder=""
          promptLabel="Ingresa una contraseña"
          strongLabel="Difícil"
          strongRegex="^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})"
          style={null}
          toggleMask={true}
          tooltip={null}
          tooltipOptions={null}
          transitionOptions={null}
          type="password"
          value=""
          weakLabel="Débil"
        >
          <div
            className="p-password p-component p-inputwrapper p-input-icon-right w-full"
            id=""
            style={null}
          >
            <ForwardRef
              autoComplete="off"
              className="p-password-input"
              id={null}
              keyfilter={/\\[\\^\\\\s\\]/}
              name="password"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
              onKeyUp={[Function]}
              placeholder=""
              style={null}
              type="password"
              value=""
            >
              <InputTextComponent
                autoComplete="off"
                className="p-password-input"
                forwardRef={
                  Object {
                    "current": <input
                      autocomplete="off"
                      class="p-inputtext p-component p-password-input"
                      name="password"
                      placeholder=""
                      type="password"
                      value=""
                    />,
                  }
                }
                id={null}
                keyfilter={/\\[\\^\\\\s\\]/}
                name="password"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onInput={[Function]}
                onKeyPress={null}
                onKeyUp={[Function]}
                placeholder=""
                style={null}
                tooltip={null}
                tooltipOptions={null}
                type="password"
                validateOnly={false}
                value=""
              >
                <input
                  autoComplete="off"
                  className="p-inputtext p-component p-password-input"
                  id={null}
                  name="password"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  onInput={[Function]}
                  onKeyPress={[Function]}
                  onKeyUp={[Function]}
                  placeholder=""
                  style={null}
                  type="password"
                  value=""
                />
              </InputTextComponent>
            </ForwardRef>
            <i
              className="pi pi-eye"
              onClick={[Function]}
            />
            <Portal
              appendTo={null}
              element={
                <CSSTransition
                  classNames="p-connected-overlay"
                  in={false}
                  nodeRef={
                    Object {
                      "current": null,
                    }
                  }
                  onEnter={[Function]}
                  onEntered={[Function]}
                  onExit={[Function]}
                  onExited={[Function]}
                  options={null}
                  timeout={
                    Object {
                      "enter": 120,
                      "exit": 100,
                    }
                  }
                  unmountOnExit={true}
                >
                  <div
                    className="p-password-panel p-component"
                    onClick={[Function]}
                    style={null}
                  >
                    <React.Fragment>
                      <div
                        className="p-password-meter"
                      >
                        <div
                          className="p-password-strength "
                          style={
                            Object {
                              "width": "0%",
                            }
                          }
                        />
                      </div>
                      <div
                        className="p-password-info"
                      >
                        Ingresa una contraseña
                      </div>
                    </React.Fragment>
                    <React.Fragment>
                      <Divider
                        align={null}
                        className={null}
                        layout="horizontal"
                        style={null}
                        type="solid"
                      />
                      <p
                        className="p-mt-2"
                      >
                        Sugerencias
                      </p>
                      <ul
                        className="p-pl-2 p-ml-2 p-mt-0"
                        style={
                          Object {
                            "lineHeight": "1.5",
                          }
                        }
                      >
                        <li>
                          Al menos una minúscula
                        </li>
                        <li>
                          Al menos una mayúscula
                        </li>
                        <li>
                          Al menos un númerico
                        </li>
                        <li>
                          Mínimo 8 carácteres
                        </li>
                      </ul>
                    </React.Fragment>
                  </div>
                </CSSTransition>
              }
              onMounted={null}
              onUnmounted={null}
              visible={false}
            >
              <Portal
                containerInfo={
                  <body>
                    <script
                      id="facebook-jssdk"
                    />
                  </body>
                }
              >
                <CSSTransition
                  classNames="p-connected-overlay"
                  in={false}
                  nodeRef={
                    Object {
                      "current": null,
                    }
                  }
                  onEnter={[Function]}
                  onEntered={[Function]}
                  onExit={[Function]}
                  onExited={[Function]}
                  options={null}
                  timeout={
                    Object {
                      "enter": 120,
                      "exit": 100,
                    }
                  }
                  unmountOnExit={true}
                >
                  <CSSTransition
                    classNames="p-connected-overlay"
                    in={false}
                    nodeRef={
                      Object {
                        "current": null,
                      }
                    }
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    timeout={
                      Object {
                        "enter": 120,
                        "exit": 100,
                      }
                    }
                    unmountOnExit={true}
                  >
                    <Transition
                      appear={false}
                      enter={true}
                      exit={true}
                      in={false}
                      mountOnEnter={false}
                      nodeRef={
                        Object {
                          "current": null,
                        }
                      }
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onEntering={[Function]}
                      onExit={[Function]}
                      onExited={[Function]}
                      onExiting={[Function]}
                      timeout={
                        Object {
                          "enter": 120,
                          "exit": 100,
                        }
                      }
                      unmountOnExit={true}
                    />
                  </CSSTransition>
                </CSSTransition>
              </Portal>
            </Portal>
          </div>
        </Password>
        <label
          className=""
          htmlFor="password"
        >
          Contraseña
        </label>
      </span>
      <FormikConnect(ErrorMessageImpl)
        name="password"
      >
        <ErrorMessageImpl
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "getFieldHelpers": [Function],
              "getFieldMeta": [Function],
              "getFieldProps": [Function],
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialErrors": Object {},
              "initialStatus": undefined,
              "initialTouched": Object {},
              "initialValues": Object {
                "password": "",
              },
              "isSubmitting": false,
              "isValid": true,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validateOnMount": false,
              "values": Object {
                "password": "",
              },
            }
          }
          name="password"
        />
      </FormikConnect(ErrorMessageImpl)>
    </InputTextApp>
  </Component>
</Formik>
`;
